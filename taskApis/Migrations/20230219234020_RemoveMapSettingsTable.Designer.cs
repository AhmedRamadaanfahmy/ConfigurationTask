// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using taskApis.Models;

#nullable disable

namespace taskApis.Migrations
{
    [DbContext(typeof(MapConfigurationContext))]
    [Migration("20230219234020_RemoveMapSettingsTable")]
    partial class RemoveMapSettingsTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("taskApis.Models.Configuration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ClusterRadius")
                        .HasColumnType("int");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<bool>("GeoFencing")
                        .HasColumnType("bit");

                    b.Property<int?>("LocationBuffer")
                        .HasColumnType("int");

                    b.Property<int?>("MapSubTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("MapTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("TimeBuffer")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MapSubTypeId");

                    b.HasIndex("MapTypeId");

                    b.ToTable("Configurations");
                });

            modelBuilder.Entity("taskApis.Models.MapSubType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("MapTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MapTypeId");

                    b.ToTable("MapSubTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MapTypeId = 1,
                            Value = "Dynamic"
                        },
                        new
                        {
                            Id = 2,
                            MapTypeId = 1,
                            Value = "Cached"
                        },
                        new
                        {
                            Id = 3,
                            MapTypeId = 2,
                            Value = "Imagery"
                        },
                        new
                        {
                            Id = 4,
                            MapTypeId = 2,
                            Value = "Topographic"
                        });
                });

            modelBuilder.Entity("taskApis.Models.MapType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MapTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Value = "Features"
                        },
                        new
                        {
                            Id = 2,
                            Value = "Basemap"
                        });
                });

            modelBuilder.Entity("taskApis.Models.Configuration", b =>
                {
                    b.HasOne("taskApis.Models.MapSubType", "MapSubType")
                        .WithMany()
                        .HasForeignKey("MapSubTypeId");

                    b.HasOne("taskApis.Models.MapType", "MapType")
                        .WithMany()
                        .HasForeignKey("MapTypeId");

                    b.Navigation("MapSubType");

                    b.Navigation("MapType");
                });

            modelBuilder.Entity("taskApis.Models.MapSubType", b =>
                {
                    b.HasOne("taskApis.Models.MapType", "MapType")
                        .WithMany("MapSubTypes")
                        .HasForeignKey("MapTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MapType");
                });

            modelBuilder.Entity("taskApis.Models.MapType", b =>
                {
                    b.Navigation("MapSubTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
